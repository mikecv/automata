++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SECTION 1 - BACKGROUND
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Home automation applications. Each application is for one particular
controller.

The intent is that the controller would also provide a web interface to provide
supervisory access and control to the controller.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SECTION 2 - DESIGN
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--------------------------------------------------------------------------------
2.1 - Controller Design
--------------------------------------------------------------------------------

Each controller inherits a generic controller class.
The generic controller class has state and mode types, and handles state
transitions.

The generic controller class has an abstract method called "controlling" that
must be overridden in the specific controller class.

--------------------------------------------------------------------------------
2.1.1 - Contorller States and Modes
--------------------------------------------------------------------------------

A controller in be in one of a number of states according to the Enum
ControllerState. The controller states are:

    STARTING = 0
    INITIALISING = 1
    ACTIVE = 2
    FAILED = 3
    TERMINATING = 4

The normal operation state for a controller is ACTIVE.
In this state the controller is continuously executing its control functions,
and listening to the UI so that it can provide status data, or perform
control functions.

In the active state a controller can be in one of the modes specified in Enum
ControllerMode. The modes apply to when the controller is in the ACTIVE state
and can be:

    OFF = 0
    ON = 1
    AUTO = 2
    MANUAL = 3

--------------------------------------------------------------------------------
2.1.2 - Contorller Status
--------------------------------------------------------------------------------

The controller listens for gRPC command GetControllerStatus on service
UiMessages. The response includes all the controller state and operational data.

--------------------------------------------------------------------------------
2.1.3 - Contorl Functions
--------------------------------------------------------------------------------

The controller listens for gRPC call SetControllerMode on service
UiControlMode. In the command the new mode for the controller is specified.
The response includes the mode that the controller has been set to,
as well as a status and fault reason if the command failed.

--------------------------------------------------------------------------------
2.1.4 - Contorller Inputs / Outputs (IO)
--------------------------------------------------------------------------------

The IO that the controller supports is as defined by generic classes in the
Generic folder. At present, there are two modules called genericDigitalInput.py
and genericDigitalOutput.py. These are base classes for digital inputs and
outputs.

In the main application folder there are digital input and output classes
derived from the base classes that implement digital inputs and outputs for the
particular hardware the controller is running on.

There are generic constants that dictate the states etc of the IO.

Digital IO can be of Enum type DigtialIoTypem:

DIGITAL_INPUT = 0
DIGITAL_OUTPUT = 1

The active state of both inputs or outputs is as per Enum type ActiveLevel:

ACTIVE_LOW = 0
ACTIVE_HIGH = 1

And the digital levels at the hardware level is represented by the Enum type
Level:

LOW = 0
HIGH = 1

The application digital input and output classes is where a signals "Level" is
set, while the base classes determine the active condition of the IO based on
the active state for the IO.

--------------------------------------------------------------------------------
2.2 - User Interface
--------------------------------------------------------------------------------

The controller serves controller data to an external UI.

The User Interface is a simple Flask web server, based on the tutorial on
the Flask Home Page. The web server includes a basic registration and login
functionality, and limited web pages, predominantly display of controller data,
and a limited number of user controls.

The controller is listening for gRPC requests from UI clients and responds to
the clients with particular controller and client data.

Similarly, the controller is listening for control commands from the UI to
perform specific control functions.
